
#include "callib.hpp"

#define BOUND_BITS_TO_B(el_nbr) cal_list<int>::t b; \
                                for(int i = 0; i < (el_nbr); i++) \
                                   b.push_back(bits[i]);

class m_parser: public smoc_actor {
public:
  m_parser(sc_module_name name, 
	   int VOL_START_CODE_LENGTH,
	   int VOL_START_CODE,
	   int VOP_START_CODE_LENGTH,
	   int VOP_START_CODE,
	   int B_VOP,
	   int P_VOP,
	   int I_VOP,
	   int BITS_QUANT,
	   int MCBPC_LENGTH,
	   int INTER,
	   int INTRA,
	   int MAXW_IN_MB );
private:
  int bit_count;
  int vol_layer_is_detailed;
  int vol_aspect_val;
  int vol_control_is_detailed;
  int vol_vbv_is_detailed;
  int mylog;
  int vol_fixed_rate;

  int vol_width;
  int vol_height;

  int mbx;
  int mby;

  int prediction_type;

  int comp;

  int round_type;
  int vop_quant;
  int fcode;
  int decode_type;
  int resync_marker_length;
  int mv_rsize;
  int mv_range;
  int mv_low;
  int mv_high;

};

m_parser::m_parser(sc_module_name name, 
		   int VOL_START_CODE_LENGTH,
		   int VOL_START_CODE,
		   int VOP_START_CODE_LENGTH,
		   int VOP_START_CODE,
		   int B_VOP,
		   int P_VOP,
		   int I_VOP,
		   int BITS_QUANT,
		   int MCBPC_LENGTH,
		   int INTER,
		   int INTRA,
		   int MAXW_IN_MB ){
  //initialisation of class variables
  bit_count = 0;




/////////////////////////////////////////////////////////////////////////////////////////////
// here starts the FSM, J. Teich, July 13-17, 2005
/////////////////////////////////////////////////////////////////////////////////////////////

// Declare states
smoc_firing_state vol, vol2, vol3, vol4, vol5, vol6, vol7, vol9, vol10, vol12, vol14, stuck;
smoc_firing_state vop, vop2, vop3, vop4, vop5, vop6;
smoc_firing_state mb, mb2, mb3, mb4;
smoc_firing_state mv, mv1, mv2, mv3, mv4, mv5;
smoc_firing_state blk;
smoc_firing_state tex, texac, texdc, tex1, vld, vld3, vld4, vld5, vld6;

// Describe State Transitions
public:
	// VOL
      vol 	= ((b.getAvailableTokens() >= 32) &&
            	(value(b,27,0) == 8))		  				>>
			call(&m_parser::vol_header_good)			>> vol2
          	| (b.getAvailableTokens() >= 32) 				>>
            	call(&m_parser::vol_header_bad) 				>> stuck;
      vol2  = ((b.getAvailableTokens() >= VOL_START_CODE_LENGTH) &&
			(value(b,VOL_START_CODE_LENGTH,0) == VOL_START_CODE)) >> 
			call(&m_parser::vol_startcode_good)			>> vol3
		| (b.getAvailableTokens() >= VOL_START_CODE_LENGTH))		>>
			call(&m_parser::vol_startcode_bad)			>> stuck;	 
      vol3  = (b.getAvailableTokens() >= 14)					>>
			call(&m_parser::vol_id)					>> vol4;
      vol4  = ((b.getAvailableTokens() >= 11) &&
			(vol_layer_is_detailed == 1))				>>
			call(&m_parser::vol_layer_detailed)			>> vol5
		| (b.getAvailableTokens() >= 4)					>>
			call(&m_parser::vol_layer_nodetails)			>> vol5;
	vol5  = ((b.getAvailableTokens() >= 17) &&
			(vol_aspect_val == 15))					>>
			call(&m_parser::vol_aspect_detailed)			>> vol6
		| (b.getAvailableTokens() >= 1) 				>>
			call(&m_parser::vol_aspect_nodetails)			>> vol6;
	vol6  = ((b.getAvailableTokens() >= 4) &&
			(vol_control_is_detailed == 1))				>>
			call(&m_parser::vol_control_detailed)			>> vol7
		| (b.getAvailableTokens() >= 3) 				>>
			call(&m_parser::vol_control_nodetails)			>> vol9;
	vol7  = ((b.getAvailableTokens() >= 82) &&
			(vol_vbv_is_detailed == 1))				>>
			call(&m_parser::vol_vbv_detailed)			>> vol9
		| (b.getAvailableTokens() >= 3)					>>
			call(&m_parser::vol_vbv_nodetails)			>> vol9;
	vol9  = (b.getAvailableTokens() >= 18)					>>
			call(&m_parser::vol_time_inc)				>> vol10;
	vol10 = ((b.getAvailableTokens() >= 1) &&
			(vol_fixed_rate == 0))					>>
			call(&m_parser::vop_rate_variable)			>> vol12
		| (b.getAvailableTokens() >= (mylog + 1))			>>
			call(&m_parser::vop_rate_fixed)				>> vol12;
	vol12 = (b.getAvailableTokens() >= 28)					>>
			call(&m_parser::vol_size)				>> vol14;
	vol14 = ((b.getAvailableTokens() >= 9) &&
			(b.getValueAt(0) == 1) || (b.getValueAt(1) == 1) || 
			(b.getValueAt(2) == 1) || (b.getValueAt(3) == 1) )	>>
			call(&m_parser::vol_misc_unsupported)			>> stuck
		| ((b.getAvailableTokens() >= 9) &&
			(b.getValueAt(7) == 1) || (b.getValueAt(8) == 1) )	>>
			call(&m_parser::vol_misc_supported)			>> vop;
      // To do: Muss man für den Endzustand Stuck auch eine Deklaration einfügen wie folgt:
	stuck = 								>> >> stuck;

	// VOP
	vop 	= (b.getAvailableTokens() >= n)					>>
			call(&m_parser::byte_align)				>> vop2;
	vop2	= ((b.getAvailableTokens() >= VOP_START_CODE_LENGTH) &&
			(value(b,VOP_START_CODE_LENGTH,0) == 1) )		>>
			call(&m_parser::vop_code_done)				>> vol
		| ((b.getAvailableTokens() >= VOP_START_CODE_LENGTH) &&
			(value(b,VOP_START_CODE_LENGTH,0) == VOP_START_CODE))   >>
			call(&m_parser::vop_code_start)				>> vop3
		| ((b.getAvailableTokens() >= VOP_START_CODE_LENGTH)		>>
			call(&m_parser::vop_code_other)				>> stuck;
	vop3  = ((b.getAvailableTokens() >= 2) &&
			(value(b,2,0) == B_VOP) )				>>
			call(&m_parser::vop_predict_bvop)			>> stuck
		| (b.getAvailableTokens() >= 2) 				>>
			call(&m_parser::vop_predict_other)			>> vop4;
 	vop4  = ((b.getAvailableTokens() >= 1) &&
			(b.getValueAt(0) == 1) )				>>
			call(&m_parser::vop_timebase_one)			>> vop4
		| (b.getAvailableTokens() >= 2) 				>>
			call(&m_parser::vop_timebase_zero)			>> vop5;
	vop5  = (b.getAvailableTokens() >= (mylog + 1))				>>
			call(&m_parser::vop_time_inc)				>> vop6;
	vop6  = ((b.getAvailableTokens() >= 1) &&
			(b.getValueAt(0) == 0) )				>>
			call(&m_parser::vop_uncoded)				>> vop
		| ((b.getAvailableTokens() >= (8 + BITS_QUANT)) &&	
			(prediction_type == P_VOP) )				>>
			call(&m_parser::vop_coded_pvop)				>> mb
		| ((b.getAvailableTokens() >= (4 + BITS_QUANT)) &&
			(prediction_type == I_VOP) )				>>
			call(&m_parser::cop_coded_ivop)				>> mb;


	// MB
	mb    = (mby == vol_height)						>>
			call(&m_parser::mb_done)				>> vop
		| ((b.getAvailableTokens() >=1) &&
			(prediction_type == P_VOP) &&
			(mv.getAvailableSpace() >= 36) )			>>
			call(&m_parser::mcbpc_pvop_uncoded)			>> mb
		| ((b.getAvailableTokens() >= 1) &&
			(prediction_type == I_VOP) &&
			(b.getValueAt(0) == 1) )				>>
			call(&m_parser::mcbpc_ivop_b1)				>> mb2
		| ((b.getAvailableTokens() >= 3) &&
			(prediction_type == I_VOP) &&
			((b.getValueAt(1) == 1) || (b.getValueAt(2) == 1)) )	>>
			call(&m_parser::mcbpc_ivop_b3)				>> mb2
		| ((b.getAvailableTokens() >= 4) &&
			(prediction_type == I_VOP) &&
			(b.getValueAt(3) == 1) )	>>
			call(&m_parser::mcbpc_ivop_b4)				>> mb2
		| ((b.getAvailableTokens() >= 2) &&
			(prediction_type == P_VOP) &&
			(b.getValueAt(1) == 1) )	>>
			call(&m_parser::mcbpc_pvop_b1)				>> mb2
		| ((b.getAvailableTokens() >= 3) &&
			(prediction_type == P_VOP) &&
			(b.getValueAt(2) == 1) )	>>
			call(&m_parser::mcbpc_pvop_b3)				>> mb2
		| ((b.getAvailableTokens() >= 5) &&
			(prediction_type == P_VOP) &&
			(b.getValueAt(3) == 1) )	>>
			call(&m_parser::mcbpc_pvop_b4)				>> mb2
		| ((b.getAvailableTokens() >= 6) &&
			(prediction_type == P_VOP) &&
			((b.getValueAt(4) == 1) || (b.getValueAt(5) == 1)) )	>>
			call(&m_parser::mcbpc_pvop_b5)				>> mb2
		| ((b.getAvailableTokens() >= 7) &&
			(prediction_type == P_VOP) &&
			((b.getValueAt(4) == 1) || (b.getValueAt(5) == 0)) )	>>
			call(&m_parser::mcbpc_pvop_b6)				>> mb2
		| ((b.getAvailableTokens() >= 8) &&
			(prediction_type == P_VOP) &&
			((b.getValueAt(5) == 1) || ((b.getValueAt(6) == 1) && (b.getValueAt(7) == 1))	)>>
			call(&m_parser::mcbpc_pvop_b7)				>> mb2
		| ((b.getAvailableTokens() >= 9) &&
			(prediction_type == P_VOP) &&
			((b.getValueAt(6) == 1) || ((b.getValueAt(7) == 1) && (b.getValueAt(8) == 1))	)>>
			call(&m_parser::mcbpc_pvop_b7)				>> mb2
		| ((b.getAvailableTokens() >= 10) &&
			(prediction_type == P_VOP) &&
			((b.getValueAt(7) == 1) || (b.getValueAt(8) == 1) || (b.getValueAt(9) == 1) )>>
			call(&m_parser::mcbpc_pvop_b7)				>> mb2
		| (b.getAvailableTokens() >= (MCBPC_LENGTH +1))			>>
			call(&m_parser::mcpbc_bad)				>> stuck;
	mb2     = ((type != 3) && (type != 4))					>>
			call(&m_parser::get_mbtype_noac)			>> mb3
		| (b.getAvailableTokens() >= 1)					>>
			call(&m_parser::get_mbtype_ac)				>> mb3;
	mb3     = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) && (b.getValueAt(1) == 1)) )  	>>
			call(&m_parser::get_cbpy_b2)				>> mb4
		| ((b.getAvailableTokens() >= 4) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1) || 
			 ((b.getValueAt(2) == 1) && (b.getValueAt(3) == 1)) ) 	>>
			call(&m_parser::get_cbpy_b4)				>> mb4
	        | ((b.getAvailableTokens() >= 5) &&
			((b.getValueAt(2) == 1) || (b.getValueAt(3) == 1)) )  	>>
			call(&m_parser::get_cbpy_b5)				>> mb4
	        | ((b.getAvailableTokens() >= 6) && 			
			(b.getValueAt(4) == 1) )				>>
			call(&m_parser::get_cbpy_b6)				>> mb4
                | (b.getAvailableTokens() >= 6)					>> stuck;
	mb4     = (btype == INTER)						>>
			call(&m_parser::final_cbpy_inter)			>> mv
		| 								>>
			call(&m_parser::final_cbpy_intra)			>> blk;


	// mv
        mv    = ((mv_comp == 4) || 
			((mv_comp == 1) && (fourmv_flag == 0)) )		>>
			call(&m_parser::mv_code_done)				>> blk
		| ((b.getAvailableTokens() >= 1) &&
			(b.getValueAt(0) == 1) )				>>
			call(&m_parser::mvcode_b1)				>> mv1
		| ((b.getAvailableTokens() >= 3) &&
			(b.getValueAt(1) == 1) )				>>
			call(&m_parser::mvcode_b2)				>> mv1
		| ((b.getAvailableTokens() >= 4) &&
			(b.getValueAt(2) == 1) )				>>
			call(&m_parser::mvcode_b3)				>> mv1
		| ((b.getAvailableTokens() >= 5) &&
			(b.getValueAt(3) == 1) )				>>
			call(&m_parser::mvcode_b4)				>> mv1
		| ((b.getAvailableTokens() >= 7) &&
			((b.getValueAt(4) == 1) && (b.getValueAt(5) == 1)) )						>>
			call(&m_parser::mvcode_b6)				>> mv1
		| ((b.getAvailableTokens() >= 8) &&
			((v == 3) || (b.getValueAt(4) == 1)) )			>>
			call(&m_parser::mvcode_b7)				>> mv1
		| ((b.getAvailableTokens() >= 10) &&
			((v == 5) || (v == 6) || (v == 7)) )			>>
			call(&m_parser::mvcode_b9)				>> mv1
		| ((b.getAvailableTokens() >= 11) &&
			((v >= 4) && (v <= 17)) )				>>
			call(&m_parser::mvcode_b10)				>> mv1
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 2) && (v <= 7)) )				>>
			call(&m_parser::mvcode_b11)				>> mv1
		| ((b.getAvailableTokens() >= 13) &&
			((v == 2) || (v == 3)) )				>>
			call(&m_parser::mvcode_b12)				>> mv1
		| (b.getAvailableTokens() >= 13)				>>
			call(&m_parser::mvcode_bad)				>> mv1;
      mv1   = ((fcode <= 1) || (mvval == 0))					>>
			call(&m_parser::get_residual_x_none)			>> mv2
		| (b.getAvailableTokens() >= fcode)				>>
			call(&m_parser::get_residual_x_some)			>> mv2;
	mv2   = ((b.getAvailableTokens() >= 1) &&
			(b.getValueAt(0) == 1) )				>>
			call(&m_parser::mvcode_b1)				>> mv3
		| ((b.getAvailableTokens() >= 3) &&
			(b.getValueAt(1) == 1) )				>>
			call(&m_parser::mvcode_b2)				>> mv3
		| ((b.getAvailableTokens() >= 4) &&
			(b.getValueAt(2) == 1) )				>>
			call(&m_parser::mvcode_b3)				>> mv3
		| ((b.getAvailableTokens() >= 5) &&
			(b.getValueAt(3) == 1) )				>>
			call(&m_parser::mvcode_b4)				>> mv3
		| ((b.getAvailableTokens() >= 7) &&
			((b.getValueAt(4) == 1) && (b.getValueAt(5) == 1)) )						>>
			call(&m_parser::mvcode_b6)				>> mv3
		| ((b.getAvailableTokens() >= 8) &&
			((v == 3) || (b.getValueAt(4) == 1)) )			>>
			call(&m_parser::mvcode_b7)				>> mv3
		| ((b.getAvailableTokens() >= 10) &&
			((v == 5) || (v == 6) || (v == 7)) )			>>
			call(&m_parser::mvcode_b9)				>> mv3
		| ((b.getAvailableTokens() >= 11) &&
			((v >= 4) && (v <= 17)) )				>>
			call(&m_parser::mvcode_b10)				>> mv3
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 2) && (v <= 7)) )				>>
			call(&m_parser::mvcode_b11)				>> mv3
		| ((b.getAvailableTokens() >= 13) &&
			((v == 2) || (v == 3)) )				>>
			call(&m_parser::mvcode_b12)				>> mv3
		| (b.getAvailableTokens() >= 13)				>>
			call(&m_parser::mvcode_bad)				>> mv3;
	mv3   = ((fcode <= 1) || (mvval == 0))					>>
			call(&m_parser::get_residual_y_none)			>> mv4
		| (b.getAvailableTokens() >= (fcode - 1))			>>
			call(&m_parser::get_residual_y_some)			>> mv4;
	mv4   = ((mvcomp == 0) && (mby == 0) )					>>
			call(&m_parser::mvpred_y0_cornercase)			>> mv5
		| (mvcomp == 0)							>>
			call(&m_parser::mvpred_y0_other)			>> mv5
		| ((mvcomp == 1) && (mby == 0) )				>> 
			call(&m_parser::mvpred_y1_cornercase)			>> mv5
		| (mvcomp == 1) 						>>
			call(&m_parser::mvpred_y1_other)			>> mv5
		| (mvcomp == 2)							>>
			call(&m_parser::mvpred_y2)				>> mv5
		| 								>>
			call(&m_parser::mvpred_y3)				>> mv5;		 
	mv5   = 								>>
			call(&m_parser::mvcompute)				>> mv;

	// blk
	blk   = (comp == 6) 							>>
			call(&m_parser::mb_dispath_done)			>> mb
		| ((param.getAvailableSpace() >= 4) &&
			(mv.getAvailableSpace() >= 6) )				>>
			call(&m_parser::mb_dispath_intra)			>> tex
		| ((cal_bitand(cbp, cal_lshift(1,5-comp) == 0) &&
                  (mv.getAvailableSpace >= 6) )					>>
			call(&m_parser::mb_dispatch_inter_no_ac)		>> blk
		| ((param.getAvailableSpace() >= 4) &&
			(mv.getAvailableSpace() >= 6) )				>> 
			call(&m_parser::mb_dispatch_inter_ac_coded) 		>> tex;

	// texture
	tex   = (prediction_type == I_VOP)					>>
			call(&m_parser::vld_start_intra)			>> texdc
		| 								>>
			call(&m_parser::vld_start_inter)			>> texac;
	texdc = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || ((b.getValueAt(1) == 1) && (comp > 3)))) >>
			call(&m_parser::dcbits_b2)				>> vld
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(1) == 1) || (b.getValueAt(2) == 1)) )    >>
			call(&m_parser::dcbits_b3)				>> vld
		| ((b.getAvailableTokens() >= 4) &&
			(b.getValueAt(3) == 1) )  				>>
			call(&m_parser::dcbits_b4)				>> vld
		| ((b.getAvailableTokens() >= 5) &&
			(b.getValueAt(4) == 1) )  				>>
			call(&m_parser::dcbits_b5)				>> vld
		| ((b.getAvailableTokens() >= 6) &&
			(b.getValueAt(5) == 1) )  				>>
			call(&m_parser::dcbits_b6)				>> vld
		| ((b.getAvailableTokens() >= 7) &&
			(b.getValueAt(6) == 1) )  				>>
			call(&m_parser::dcbits_b7)				>> vld
		| ((b.getAvailableTokens() >= 8) &
			(b.getValueAt(7) == 1) )  				>>
			call(&m_parser::dcbits_b8)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			(b.getValueAt(8) == 1) )  				>>
			call(&m_parser::dcbits_b9)				>> vld
		| ((b.getAvailableTokens() >= 10) &&
			(b.getValueAt(9) == 1) )  				>>
			call(&m_parser::dcbits_b10)				>> vld
		| ((b.getAvailableTokens() >= 11) &&
			(b.getValueAt(10) == 1) )  				>>
			call(&m_parser::dcbits_b11)				>> vld
		| ((b.getAvailableTokens() >= 12) &&
			((b.getValueAt(11) == 1) && (comp > 3)) )  		>>
			call(&m_parser::dcbits_b12)				>> vld
		| (b.getAvailableTokens() >= 12) 				>>
			call(&m_parser::dcbits_bad)				>> stuck;
	tex1  = (dc_bits == 0)							>>
			call(&m_parser::get_dc_none)				>> texac
		| ((b.getAvailableTokens() >= dcbits) &&
			(dcbits <= 8) )						>>
			call(&m_parser::get_dc_small)				>> texac
		| ((b.getAvailableTokens() >= (dcbits + 1))			>>
			call(&m_parser::get_dc_large)				>> texac;
	texac = ((b.getAvailableTokens() >= 1) &&
			((b_index == 64) || (b_last == 1) || (ac_coded == 0)) &&
			(flags.getAvailableSpace() >= 4) )			>>
			call(&m_parser::block_done)				>> blk
		| ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
	vld   = ((sign.getAvailableTokens() >= 1) &&
			(vld_index != 18) )					>>
			call(&m_parser::vld_code_lookup)			>> texac
		| ((level_offset.getAvailableTokens() >= 1) &&
			(level_offset.getValueAt(0) == 0) )			>>
			call(&m_parser::vld_level)				>> vld3
		| ((level_offset.getAvailableTokens() >= 1) &&
			(run_offset.getAvailableTokens() >= 1) )		>>
			call(&m_parser::vld_run)				>> vld5
		| (b.getAvailableTokens() >= 23)				>>
			call(&m_parser::vld_direct_lookup)			>> texac;
	vld3  = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld4
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld4
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld4
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld4
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld4
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld4
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld4
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld4
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld4
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld4
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld4
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
    	vld5  = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld6
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld6
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld6
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld6
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld6
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld6
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld6
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld6
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld6
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld6
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld6
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
      vld4      = (sign.getAvailableTokens() >= 1)				>>
			call(&m_parser::vld_level_lookup)			>> texac;
      vld6      = (sign.getAvailableTokens() >= 1)				>>
			call(&m_parser::vld_run_lookup)				>> texac;
 }
};
