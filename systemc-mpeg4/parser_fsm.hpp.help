

//////////////////////////////////////////////////////////////////////////////
// MB
mb  = (var(mby) == var(vol_height)) >>
	call(&m_parser::action_mb_done) >> vop
    | ((bits.getAvailableTokens() >=1) &&
	(var(prediction_type) == P_VOP) &&
	(mv.getAvailableSpace() >= 36) ) >>
	call(&m_parser::action_mcbpc_pvop_uncoded) >> mb
    | ((bits.getAvailableTokens() >= 1) &&
	(var(prediction_type) == I_VOP) &&
	(bits.getValueAt(0) == 1)) >>
	call(&m_parser::action_mcbpc_ivop_b1) >> mb2
    | ((bits.getAvailableTokens() >= 3) &&
	(var(prediction_type) == I_VOP) &&
	((bits.getValueAt(1) == 1) || (bits.getValueAt(2) == 1)) ) >>
	call(&m_parser::action_mcbpc_ivop_b3) >> mb2
    | ((bits.getAvailableTokens() >= 4) &&
	(var(prediction_type) == I_VOP) &&
	(bits.getValueAt(3) == 1) ) >>
	call(&m_parser::action_mcbpc_ivop_b4) >> mb2
    | ((bits.getAvailableTokens() >= 6) &&
	(var(prediction_type) == I_VOP) &&
	(bits.getValueAt(4) == 1) || (bits.getValueAt(5) == 1) ) >>
	call(&m_parser::action_mcbpc_ivop_b6) >> mb2
    | ((bits.getAvailableTokens() >= 2) &&
	(var(prediction_type) == P_VOP) &&
	(bits.getValueAt(1) == 1) ) >>
	call(&m_parser::action_mcbpc_pvop_b1) >> mb2
    | ((bits.getAvailableTokens() >= 4) &&
	(var(prediction_type) == P_VOP) &&
	(bits.getValueAt(2) == 1) ) >>
	call(&m_parser::action_mcbpc_pvop_b3) >> mb2
    | ((bits.getAvailableTokens() >= 5) &&
	(var(prediction_type) == P_VOP) &&
	(bits.getValueAt(3) == 1) ) >>
	call(&m_parser::action_mcbpc_pvop_b4) >> mb2
    | ((bits.getAvailableTokens() >= 6) &&
	(var(prediction_type) == P_VOP) &&
	((bits.getValueAt(4) == 1) || (bits.getValueAt(5) == 1)) ) >>
	call(&m_parser::action_mcbpc_pvop_b5) >> mb2
    | ((bits.getAvailableTokens() >= 7) &&
	(var(prediction_type) == P_VOP) &&
	((bits.getValueAt(4) == 1) && (bits.getValueAt(5) == 0)) ) >>
	call(&m_parser::action_mcbpc_pvop_b6) >> mb2
    | ((bits.getAvailableTokens() >= 8) &&
	(var(prediction_type) == P_VOP) &&
	((bits.getValueAt(5) == 1) || ((bits.getValueAt(6) == 1) && (bits.getValueAt(7) == 1)) ) >>
	call(&m_parser::action_mcbpc_pvop_b7) >> mb2
    | ((bits.getAvailableTokens() >= 9) &&
	(var(prediction_type) == P_VOP) &&
	((bits.getValueAt(6) == 1) || ((bits.getValueAt(7) == 1) && (bits.getValueAt(8) == 1))) ) >>
	call(&m_parser::action_mcbpc_pvop_b8) >> mb2
    | ((bits.getAvailableTokens() >= 10) &&
	(var(prediction_type) == P_VOP) &&
	((bits.getValueAt(7) == 1) || (bits.getValueAt(8) == 1) || (bits.getValueAt(9) == 1)) ) >>
	call(&m_parser::action_mcbpc_pvop_b9) >> mb2
    | (bits.getAvailableTokens() >= (MCBPC_LENGTH + 1)) >>
        call(&m_parser::action_mcbpc_bad) >> stuck;

mb2 = (guard_get_mbtype_noac()) >>
	call(&m_parser::action_get_mbtype_noac) >> mb3
    | (bits.getAvailableTokens() >= 1) >>
	call(&m_parser::action_get_mbtype_ac) >> mb3;

mb3 = ((bits.getAvailableTokens() >= 2) &&
       ((bits.getValueAt(0) == 1) && (bits.getValueAt(1) == 1)) ) >>
	call(&m_parser::action_get_cbpy_b2) >> mb4
    | ((bits.getAvailableTokens() >= 4) &&
       ((bits.getValueAt(0) == 1) || (bits.getValueAt(1) == 1) ||
       ((bits.getValueAt(2) == 1) && (bits.getValueAt(3) == 1)))) >>
	call(&m_parser::action_get_cbpy_b4) >> mb
    | ((bits.getAvailableTokens() >= 5) &&
       ((bits.getValueAt(2) == 1) || (bits.getValueAt(3) == 1)) ) >>
	call(&m_parser::action_get_cbpy_b5) >> mb4
    | ((bits.getAvailableTokens() >= 6) &&
       (bits.getValueAt(4) == 1) ) >>
	call(&m_parser::action_get_cbpy_b6) >> mb4
    | (bits.getAvailableTokens() >= 6) >>
        call(&m_parser::action_bad_cbpy) >> stuck;

mb4 = (var(btype) == INTER) >>
        call(&m_parser::action_final_cbpy_inter) >> mv0
    | (guard_dummy()) >>
        call(&m_parser::action_final_cbpy_intra) >> blk;


//////////////////////////////////////////////////////////////////////////////
// MV
mv0 = ((var(mvcomp) == 4) ||
        ((var(mvcomp) == 1) && (var(fourmvflag) == 0)) ) >>
	call(&m_parser::action_mvcode_done) >> blk
    | ((bits.getAvailableTokens() >= 1) &&
	(bits.getValueAt(0) == 1) ) >>
	call(&m_parser::action_mvcode_b1) >> mv1
    | ((bits.getAvailableTokens() >= 3) &&
	(bits.getValueAt(1) == 1) ) >>
	call(&m_parser::action_mvcode_b2) >> mv1
    | ((bits.getAvailableTokens() >= 4) &&
	(bits.getValueAt(2) == 1) ) >>
	call(&m_parser::action_mvcode_b3) >> mv1
    | ((bits.getAvailableTokens() >= 5) &&
	(bits.getValueAt(3) == 1) ) >>
	call(&m_parser::action_mvcode_b4) >> mv1
    | ((bits.getAvailableTokens() >= 7) &&
	((bits.getValueAt(4) == 1) && (bits.getValueAt(5) == 1)) ) >>
	call(&m_parser::action_mvcode_b6) >> mv1
    | ((bits.getAvailableTokens() >= 8) &&
	(guard_mvcode_b7())) >>
	call(&m_parser::action_mvcode_b7) >> mv1
    | ((bits.getAvailableTokens() >= 10) &&
	(guard_mvcode_b9())) >>
	call(&m_parser::action_mvcode_b9) >> mv1
    | ((bits.getAvailableTokens() >= 11) &&
	(guard_mvcode_b10())) >>
	call(&m_parser::action_mvcode_b10) >> mv1
    | ((bits.getAvailableTokens() >= 12) &&
	(guard_mvcode_b11())) >>
	call(&m_parser::action_mvcode_b11) >> mv1
    | ((bits.getAvailableTokens() >= 13) &&
	(guard_mvcode_b12())) >>
	call(&m_parser::action_mvcode_b12) >> mv1
    | (bits.getAvailableTokens() >= 13) >>
	call(&m_parser::action_mvcode_bad) >> mv1;

mv1 = ((var(fcode) <= 1) || (var(mvval) == 0)) >>
	call(&m_parser::action_get_residual_x_none) >> mv2
    | (bits.getAvailableTokens() >= var(fcode)) >>
	call(&m_parser::action_get_residual_x_some) >> mv2;

mv2 = ((bits.getAvailableTokens() >= 1) &&
	(bits.getValueAt(0) == 1) ) >>
	call(&m_parser::action_mvcode_b1) >> mv3
    | ((bits.getAvailableTokens() >= 3) &&
	(bits.getValueAt(1) == 1) ) >>
	call(&m_parser::action_mvcode_b2) >> mv3
    | ((bits.getAvailableTokens() >= 4) &&
	(bits.getValueAt(2) == 1) ) >>
	call(&m_parser::action_mvcode_b3) >> mv3
    | ((bits.getAvailableTokens() >= 5) &&
	(bits.getValueAt(3) == 1) ) >>
	call(&m_parser::action_mvcode_b4) >> mv3
    | ((bits.getAvailableTokens() >= 7) &&
	((bits.getValueAt(4) == 1) && (bits.getValueAt(5) == 1))) >>
	call(&m_parser::action_mvcode_b6) >> mv3
    | ((bits.getAvailableTokens() >= 8) &&
	(guard_mvcode_b7())) >>
	call(&m_parser::action_mvcode_b7) >> mv3
    | ((bits.getAvailableTokens() >= 10) &&
	(guard_mvcode_b9())) >>
	call(&m_parser::action_mvcode_b9) >> mv3
    | ((bits.getAvailableTokens() >= 11) &&
	(guard_mvcode_b10())) >>
	call(&m_parser::action_mvcode_b10) >> mv3
    | ((bits.getAvailableTokens() >= 12) &&
	(guard_mvcode_b11())) >>
	call(&m_parser::action_mvcode_b11) >> mv3
    | ((bits.getAvailableTokens() >= 13) &&
	(guard_mvcode_b12())) >>
	call(&m_parser::action_mvcode_b12) >> mv3
    | (bits.getAvailableTokens() >= 13) >>
	call(&m_parser::action_mvcode_bad) >> mv3;

mv3 = ((var(fcode) <= 1) || (var(mvval) == 0)) >>
        call(&m_parser::action_get_residual_y_none) >> mv4
    | (bits.getAvailableTokens() >= (var(fcode) - 1)) >>
	call(&m_parser::action_get_residual_y_some) >> mv4;

mv4 = ((var(mvcomp) == 0) && (var(mby) == 0) ) >>
	call(&m_parser::action_mvpred_y0_cornercase) >> mv5
    | (var(mvcomp) == 0) >>
	call(&m_parser::action_mvpred_y0_other) >> mv5
    | ((var(mvcomp) == 1) && (var(mby) == 0) ) >>
	call(&m_parser::action_mvpred_y1_cornercase) >> mv5
    | (var(mvcomp) == 1) >>
	call(&m_parser::action_mvpred_y1_other) >> mv5
    | (var(mvcomp) == 2) >>
	call(&m_parser::action_mvpred_y2) >> mv5
    |  (guard_dummy()) >>
	call(&m_parser::action_mvpred_y3) >> mv5;

mv5 = ((guard_dummy())) >>
	call(&m_parser::action_mvcompute) >> mv0;

//////////////////////////////////////////////////////////////////////////////
// blk
blk = (var(comp) == 6) >>
	call(&m_parser::action_mb_dispatch_done) >> mb
    | ((param.getAvailableSpace() >= 4) &&
	(mv.getAvailableSpace() >= 6) ) >>
	call(&m_parser::action_mb_dispatch_intra) >> tex
    | ((guard_mb_dispatch_inter_no_ac() &&
        (mv.getAvailableSpace() >= 6))) >>
	call(&m_parser::action_mb_dispatch_inter_no_ac) >> blk
    | ((param.getAvailableSpace() >= 4) &&
	(mv.getAvailableSpace() >= 6) ) >>
	call(&m_parser::action_mb_dispatch_inter_ac_coded) >> tex;


//////////////////////////////////////////////////////////////////////////////
// texture
	tex   = (prediction_type == I_VOP)					>>
			call(&m_parser::vld_start_intra)			>> texdc
		| 								>>
			call(&m_parser::vld_start_inter)			>> texac;
	texdc = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || ((b.getValueAt(1) == 1) && (comp > 3)))) >>
			call(&m_parser::dcbits_b2)				>> vld
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(1) == 1) || (b.getValueAt(2) == 1)) )    >>
			call(&m_parser::dcbits_b3)				>> vld
		| ((b.getAvailableTokens() >= 4) &&
			(b.getValueAt(3) == 1) )  				>>
			call(&m_parser::dcbits_b4)				>> vld
		| ((b.getAvailableTokens() >= 5) &&
			(b.getValueAt(4) == 1) )  				>>
			call(&m_parser::dcbits_b5)				>> vld
		| ((b.getAvailableTokens() >= 6) &&
			(b.getValueAt(5) == 1) )  				>>
			call(&m_parser::dcbits_b6)				>> vld
		| ((b.getAvailableTokens() >= 7) &&
			(b.getValueAt(6) == 1) )  				>>
			call(&m_parser::dcbits_b7)				>> vld
		| ((b.getAvailableTokens() >= 8) &
			(b.getValueAt(7) == 1) )  				>>
			call(&m_parser::dcbits_b8)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			(b.getValueAt(8) == 1) )  				>>
			call(&m_parser::dcbits_b9)				>> vld
		| ((b.getAvailableTokens() >= 10) &&
			(b.getValueAt(9) == 1) )  				>>
			call(&m_parser::dcbits_b10)				>> vld
		| ((b.getAvailableTokens() >= 11) &&
			(b.getValueAt(10) == 1) )  				>>
			call(&m_parser::dcbits_b11)				>> vld
		| ((b.getAvailableTokens() >= 12) &&
			((b.getValueAt(11) == 1) && (comp > 3)) )  		>>
			call(&m_parser::dcbits_b12)				>> vld
		| (b.getAvailableTokens() >= 12) 				>>
			call(&m_parser::dcbits_bad)				>> stuck;
	tex1  = (dc_bits == 0)							>>
			call(&m_parser::get_dc_none)				>> texac
		| ((b.getAvailableTokens() >= dcbits) &&
			(dcbits <= 8) )						>>
			call(&m_parser::get_dc_small)				>> texac
		| ((b.getAvailableTokens() >= (dcbits + 1))			>>
			call(&m_parser::get_dc_large)				>> texac;
	texac = ((b.getAvailableTokens() >= 1) &&
			((b_index == 64) || (b_last == 1) || (ac_coded == 0)) &&
			(flags.getAvailableSpace() >= 4) )			>>
			call(&m_parser::block_done)				>> blk
		| ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
	vld   = ((sign.getAvailableTokens() >= 1) &&
			(vld_index != 18) )					>>
			call(&m_parser::vld_code_lookup)			>> texac
		| ((level_offset.getAvailableTokens() >= 1) &&
			(level_offset.getValueAt(0) == 0) )			>>
			call(&m_parser::vld_level)				>> vld3
		| ((level_offset.getAvailableTokens() >= 1) &&
			(run_offset.getAvailableTokens() >= 1) )		>>
			call(&m_parser::vld_run)				>> vld5
		| (b.getAvailableTokens() >= 23)				>>
			call(&m_parser::vld_direct_lookup)			>> texac;
	vld3  = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld4
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld4
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld4
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld4
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld4
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld4
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld4
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld4
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld4
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld4
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld4
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
    	vld5  = ((b.getAvailableTokens() >= 2) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 0)) )    >>
			call(&m_parser::vld_code_b2)				>> vld6
		| ((b.getAvailableTokens() >= 3) &&
			((b.getValueAt(0) == 1) || (b.getValueAt(1) == 1)) )    >>
			call(&m_parser::vld_code_b3)				>> vld6
		| ((b.getAvailableTokens() >= 4) &&
			((v == 7) || (v == 14) || (v == 14)) )  		>>
			call(&m_parser::vld_code_b4)				>> vld6
		| ((b.getAvailableTokens() >= 5) &&
			((v == 11) || (v == 12) || (v == 13)) )  		>>
			call(&m_parser::vld_code_b5)				>> vld6
		| ((b.getAvailableTokens() >= 6) &&
			((v >= 12) && (v <= 21)) )  				>>
			call(&m_parser::vld_code_b6)				>> vld6
		| ((b.getAvailableTokens() >= 7) &&
			((v == 3) || ((v >= 16) && (v <= 23)) )  		>>
			call(&m_parser::vld_code_b7)				>> vld6
		| ((b.getAvailableTokens() >= 8) &&
			((v >= 19) && (v <= 31)) )  				>>
			call(&m_parser::vld_code_b8)				>> vld6
		| ((b.getAvailableTokens() >= 9) &&
			((v >= 17) && (v <= 37)) )  				>>
			call(&m_parser::vld_code_b9)				>> vld6
		| ((b.getAvailableTokens() >= 9) &&
			(((v >= 4) && (v <= 15)) || (v == 32) || (v == 33)) )   >> 					>>
			call(&m_parser::vld_code_b10)				>> vld6
		| ((b.getAvailableTokens() >= 10) &&
			(((v >= 4) && (v <= 7)) || (v >= 32) && (v <= 39)) ) 	>> 					>>
			call(&m_parser::vld_code_b11)				>> vld6
		| ((b.getAvailableTokens() >= 12) &&
			((v >= 80) && (v <= 95)) )  				>>
			call(&m_parser::vld_code_b12)				>> vld6
		| (b.getAvailableTokens() >= 12)				>>
			call(&m_parser::vld_code_bad)				>> stuck;
      vld4      = (sign.getAvailableTokens() >= 1)				>>
			call(&m_parser::vld_level_lookup)			>> texac;
      vld6      = (sign.getAvailableTokens() >= 1)				>>
			call(&m_parser::vld_run_lookup)				>> texac;
 }
};
