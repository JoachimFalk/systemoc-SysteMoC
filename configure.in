#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT(SysteMoC, 0.1, falk@cs.fau.de)
AC_PREREQ(2.57)

AC_PATH_PROGS(BASH, bash)
AC_PATH_PROGS(PERL, perl)

ACJF_INIT

AC_CONFIG_SRCDIR([SystemC-Examples.txt])

AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_LANG([C++])

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL(CC, gcc)
ACJF_CHECK_CROSSTOOL(CXX, g++)
ACJF_CHECK_CROSSTOOL(AR, ar)
ACJF_CHECK_CROSSTOOL(RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL(NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
# Checks for programs.
#AC_PROG_LIBTOOL
#AC_PROG_INSTALL
#AC_PROG_LN_S
#AC_PROG_MAKE_SET

AM_INIT_AUTOMAKE

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])

AC_ARG_ENABLE(synthesis-support,
  [  --enable-synthesis-support     Turn on Support for synth target in selected examples],
  [case "${enableval}" in
    yes)  synth=auto
      ;;
    no)   synth=false
      ;;
    *)
      synth=""
      while test x"${enableval}" != x; do
        optval="${enableval%%,*}";
        case "${optval}" in
          sw|SW)    synth="${synth}:sw:";;
          hw|HW)    synth="${synth}:hw:";;
          hwc|HWC)  synth="${synth}:hwc:";;
          testlib)  synth="${synth}:testlib:";;
          sgx|SGX)  synth="${synth}:sgx:";;
          *)        AC_MSG_ERROR([bad value ${optval} for --enable-synthesis-support]);;
        esac
        enableval="${enableval#*,}"
      done
      ;;
   esac],
  [synth=auto])

case "$synth" in
  *:sw:*)
    synth_sw=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-SW/; then
      synth_sw=true
    else
      synth_sw=false
    fi
    ;;
  *)
    synth_sw=false
    ;;
esac

AM_CONDITIONAL(SYNTH_SW,      test x$synth_sw      = xtrue)

case "$synth" in
  *:hw:*)
    synth_hw=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-Actor-Cynthesizer/; then
      synth_hw=true
    else
      synth_hw=false
    fi
    ;;
  *)
    synth_hw=false
    ;;
esac

AM_CONDITIONAL(SYNTH_HW,      test x$synth_hw      = xtrue)

case "$synth" in
  *:hwc:*)
    synth_hwc=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-Actor-Concurrent/; then
      synth_hwc=true
    else
      synth_hwc=false
    fi
    ;;
  *)
    synth_hwc=false
    ;;
esac

AM_CONDITIONAL(SYNTH_HWC,     test x$synth_hwc     = xtrue)

case "$synth" in
  *:sgx:*)
    synth_sgx=true
    ;;
  auto)
    if test -d $srcdir/../specGen/; then
      synth_sgx=true
    else
      synth_sgx=false
    fi
    ;;
  *)
    synth_sgx=false
    ;;
esac

AM_CONDITIONAL(SYNTH_SGX,     test x$synth_sgx     = xtrue)

case "$synth" in
  *:testlib:*)
    synth_testlib=true
    ;;
  auto)
    if test -d $srcdir/../Simulation-HW-Actor/; then
      synth_testlib=true
    else
      synth_testlib=false
    fi
    ;;
  *)
    synth_testlib=false
    ;;
esac

AM_CONDITIONAL(SYNTH_TESTLIB, test x$synth_testlib = xtrue)

### SystemC-VPC ###
# --enable-vpc option
AC_ARG_ENABLE(
 [vpc],
 [[  --enable-vpc            enable vpc support for SysteMoC [default=auto]]],
 [case "$enableval" in
    yes)  enable_vpc=yes  ;;
    no)   enable_vpc=no   ;;
    auto) enable_vpc=auto ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-vpc) ;;
  esac],
 [enable_vpc=auto #default]
)

AC_CONFIG_HEADER([config.h])

AC_DISABLE_SHARED
AM_PROG_LIBTOOL

dnl check for exe extension
AC_EXEEXT

ACJF_CHECK_LIB_SYSTEMC
AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMC_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $SYSTEMC_LDFLAGS"

ACJF_CHECK_LIB_BOOST
AM_CPPFLAGS="$AM_CPPFLAGS $BOOST_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $BOOST_LDFLAGS"

ACJF_CHECK_PKG([Support])
AM_CPPFLAGS="$AM_CPPFLAGS $SUPPORT_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $SUPPORT_LDFLAGS"
SUPPORT_DEPENDENCIES="$pkg_support_builddir/libcosupport.la"
AC_SUBST([SUPPORT_DEPENDENCIES])

ACJF_CHECK_PKG([SysteMoC])
AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMOC_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $SYSTEMOC_LDFLAGS"
SYSTEMOC_DEPENDENCIES="$pkg_systemoc_builddir/libsystemoc.la"
AC_SUBST([SYSTEMOC_DEPENDENCIES])

SYSTEMC_VPC_DEPENDENCIES=""
if test x"$enable_vpc" != x"no"; then
  ACJF_CHECK_PKG([SystemC-VPC], [],
   [test x"$enable_vpc" = x"yes" && {
     AC_MSG_ERROR([cannot find SystemC-VPC package in source tree, bailing out]) } ])
fi
if test x"$pkg_systemc_vpc_srcdir" != "x"; then
  SYSTEMC_VPC_DEPENDENCIES="$pkg_systemc_vpc_builddir/libsystemcvpc.la"
  AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMC_VPC_INCLUDE"
  AM_LDFLAGS="$AM_LDFLAGS $SYSTEMC_VPC_LDFLAGS"
fi
AC_SUBST([SYSTEMC_VPC_DEPENDENCIES])

# Check for WSDF Support in SysteMoC
AC_MSG_CHECKING([for WSDF support in SysteMoC])
AC_CACHE_VAL([acjf_cv_systemoc_wsdf_support], 
 [acjf_CPPFLAGS="$CPPFLAGS"; CPPFLAGS="$CPPFLAGS $SUPPORT_INCLUDE $SYSTEMOC_INCLUDE"
  # Checks for header files.
  AC_TRY_COMPILE(
   [#include <systemoc/smoc_config.h>
   ],
   [#ifndef SYSTEMOC_ENABLE_WSDF
    # error "No WSDF Support in SysteMoC"
    #endif
   ],
   [acjf_cv_systemoc_wsdf_support=yes;],
   [acjf_cv_systemoc_wsdf_support=no;]
  )
  CPPFLAGS="$acjf_CPPFLAGS"
  unset acjf_CPPFLAGS])
if test x"$acjf_cv_systemoc_wsdf_support" = x"yes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

# AC_FUNC_ALLOCA
# AC_HEADER_STDC
# AC_CHECK_HEADERS([OS.h fcntl.h limits.h mach/mach.h malloc.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_CONFIG_FILES([Makefile])

#if test -d $srcdir/jpeg-encoder; then
#  AC_CONFIG_FILES([jpeg-encoder/Makefile])
#  subdirs="$subdirs jpeg-encoder"
#fi
#if test x"$pkg_systemc_vpc_srcdir" != "x"; then
#  AC_CONFIG_FILES([vpc-test-h261/Makefile])
## subdirs="$subdirs vpc-test-h261"
#fi
#if test -d $srcdir/systemoc-sr; then
#  AC_CONFIG_FILES([systemoc-sr/Makefile])
#  subdirs="$subdirs systemoc-sr"
#fi
if test -d $srcdir/idct2d-ref; then
  AC_CONFIG_FILES([idct2d-ref/Makefile])
  subdirs="$subdirs idct2d-ref"
fi
if test -d $srcdir/systemc-idct; then
  AC_CONFIG_FILES([systemc-idct/Makefile])
# subdirs="$subdirs systemc-idct"
fi
#if test -d $srcdir/mpeg4-ref; then
#  AC_CONFIG_FILES([mpeg4-ref/Makefile])
#  subdirs="$subdirs mpeg4-ref"
#fi
if test -d $srcdir/systemoc-idct2d; then
  AC_CONFIG_FILES([systemoc-idct2d/Makefile])
  subdirs="$subdirs systemoc-idct2d"
fi
if test -d $srcdir/systemoc-jpeg-decoder; then
  AC_CONFIG_FILES([systemoc-jpeg-decoder/Makefile])
  AC_OUTPUT([systemoc-jpeg-decoder/autovars.sh])
  subdirs="$subdirs systemoc-jpeg-decoder"
fi
#if test -d $srcdir/systemoc-mpeg4; then
#  AC_CONFIG_FILES([systemoc-mpeg4/Makefile])
## subdirs="$subdirs systemoc-mpeg4"
#fi
#if test -d $srcdir/systemoc-csp; then
#  AC_CONFIG_FILES([systemoc-csp/Makefile])
## subdirs="$subdirs systemoc-csp"
#fi
#if test -d $srcdir/systemoc-sdf; then
#  AC_CONFIG_FILES([systemoc-sdf/Makefile])
#  subdirs="$subdirs systemoc-sdf"
#fi
#if test -d $srcdir/systemoc-getValueAt; then
#  AC_CONFIG_FILES([systemoc-getValueAt/Makefile])
#  subdirs="$subdirs systemoc-getValueAt"
#fi
#if test -d $srcdir/systemoc-sdf-clustering; then
#  AC_CONFIG_FILES([systemoc-sdf-clustering/Makefile])
#  subdirs="$subdirs systemoc-sdf-clustering"
#fi
#if test -d $srcdir/systemoc-sqr; then
#  AC_CONFIG_FILES([systemoc-sqr/Makefile])
#  AC_OUTPUT([systemoc-sqr/autovars.sh])
#  subdirs="$subdirs systemoc-sqr"
#fi
#if test -d $srcdir/systemoc-cluster-example; then
#  AC_CONFIG_FILES([systemoc-cluster-example/Makefile])
#  subdirs="$subdirs systemoc-cluster-example"
#fi
#if test -d $srcdir/systemoc-par; then
#  AC_CONFIG_FILES([systemoc-par/Makefile])
#  subdirs="$subdirs systemoc-par"
#fi    
#if test -d $srcdir/systemoc-sqr-double; then
#  AC_CONFIG_FILES([systemoc-sqr-double/Makefile])
#  subdirs="$subdirs systemoc-sqr-double"
#fi
#if test -d $srcdir/systemoc-fir; then
#  AC_CONFIG_FILES([systemoc-fir/Makefile])
#  subdirs="$subdirs systemoc-fir"
#fi
#if test -d $srcdir/systemoc-src-snk; then
#  AC_CONFIG_FILES([systemoc-src-snk/Makefile])
#  subdirs="$subdirs systemoc-src-snk"
#fi
#if test -d $srcdir/systemoc-src-snk-noconsume; then
#  AC_CONFIG_FILES([systemoc-src-snk-noconsume/Makefile])
#  subdirs="$subdirs systemoc-src-snk-noconsume"
#fi
#if test -d $srcdir/systemoc-select; then
#  AC_CONFIG_FILES([systemoc-select/Makefile])
#  subdirs="$subdirs systemoc-select"
#fi
#if test -d $srcdir/systemoc-ibtest; then
#  AC_CONFIG_FILES([systemoc-ibtest/Makefile])
## subdirs="$subdirs systemoc-ibtest"
#fi
#if test -d $srcdir/systemoc-td-sim-test; then
#  AC_CONFIG_FILES([systemoc-td-sim-test/Makefile])
## subdirs="$subdirs systemoc-td-sim-test"
#fi
#if test -d $srcdir/systemoc-mpeg4-teich-v2; then
#  AC_CONFIG_FILES([systemoc-mpeg4-teich-v2/Makefile])
## subdirs="$subdirs systemoc-mpeg4-teich-v2"
#fi
#if test -d $srcdir/crypto-example; then
#  AC_CONFIG_FILES([crypto-example/Makefile])
#  subdirs="$subdirs crypto-example"
#fi
#if test -d $srcdir/systemoc-tlm-start; then
#  AC_CONFIG_FILES([systemoc-tlm-start/Makefile])
##  subdirs="$subdirs systemoc-tlm-start"
#fi
#if test x"$acjf_cv_systemoc_wsdf_support" = x"yes"; then
#  if test -d $srcdir/systemoc-wsdf; then
#    AC_CONFIG_FILES([systemoc-wsdf/Makefile])
#	  AC_OUTPUT([systemoc-wsdf/autovars.sh])
#    subdirs="$subdirs systemoc-wsdf"
#  fi
#  if test -d $srcdir/systemoc-wsdf-expr; then
#    AC_CONFIG_FILES([systemoc-wsdf-expr/Makefile])
#    subdirs="$subdirs systemoc-wsdf-expr"
#  fi
#  if test -d $srcdir/systemoc-wsdf-recons-dila; then
#    AC_CONFIG_FILES([systemoc-wsdf-recons-dila/Makefile])
#		AC_OUTPUT([systemoc-wsdf-recons-dila/autovars.sh])
#    subdirs="$subdirs systemoc-wsdf-recons-dila"	
#  fi
#  if test -d $srcdir/systemoc-wsdf-src-snk; then
#    AC_CONFIG_FILES([systemoc-wsdf-src-snk/Makefile])
#    subdirs="$subdirs systemoc-wsdf-src-snk"
#  fi
#  if test -d $srcdir/systemoc-wsdf-dist; then
#    AC_CONFIG_FILES([systemoc-wsdf-dist/Makefile])
#    subdirs="$subdirs systemoc-wsdf-dist"
#  fi
#fi

SUBDIRS=$subdirs
AC_SUBST(SUBDIRS)

ACJF_DONE

AC_OUTPUT
