#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT(Testcases, 0.1, falk@cs.fau.de)
AC_PREREQ(2.57)

AC_PATH_PROGS(BASH, bash)
AC_PATH_PROGS(PERL, perl)

ACJF_INIT

AC_CONFIG_SRCDIR([Testcases.txt])

AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_LANG([C++])

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL(CC, gcc)
ACJF_CHECK_CROSSTOOL(CXX, g++)
ACJF_CHECK_CROSSTOOL(AR, ar)
ACJF_CHECK_CROSSTOOL(RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL(NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
dnl AC_PROG_LIBTOOL
dnl AC_PROG_INSTALL
dnl AC_PROG_LN_S
dnl AC_PROG_MAKE_SET

AC_DISABLE_SHARED
AC_PROG_LIBTOOL

AM_INIT_AUTOMAKE

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])

AC_ARG_ENABLE(synthesis-support,
  [  --enable-synthesis-support     Turn on Support for synth target in selected examples],
  [case "${enableval}" in
    yes)  synth=auto
      ;;
    no)   synth=false
      ;;
    *)
      synth=""
      while test x"${enableval}" != x; do
        optval="${enableval%%,*}";
        case "${optval}" in
          sw|SW)    synth="${synth}:sw:";;
          hw|HW)    synth="${synth}:hw:";;
          hwc|HWC)  synth="${synth}:hwc:";;
          testlib)  synth="${synth}:testlib:";;
          sgx|SGX)  synth="${synth}:sgx:";;
          *)        AC_MSG_ERROR([bad value ${optval} for --enable-synthesis-support]);;
        esac
        enableval="${enableval#*,}"
      done
      ;;
   esac],
  [synth=auto])

case "$synth" in
  *:sw:*)
    synth_sw=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-SW/; then
      synth_sw=true
    else
      synth_sw=false
    fi
    ;;
  *)
    synth_sw=false
    ;;
esac

AM_CONDITIONAL(SYNTH_SW,      test x$synth_sw      = xtrue)

case "$synth" in
  *:hw:*)
    synth_hw=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-Actor-Cynthesizer/; then
      synth_hw=true
    else
      synth_hw=false
    fi
    ;;
  *)
    synth_hw=false
    ;;
esac

AM_CONDITIONAL(SYNTH_HW,      test x$synth_hw      = xtrue)

case "$synth" in
  *:hwc:*)
    synth_hwc=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-Actor-Concurrent/; then
      synth_hwc=true
    else
      synth_hwc=false
    fi
    ;;
  *)
    synth_hwc=false
    ;;
esac

AM_CONDITIONAL(SYNTH_HWC,     test x$synth_hwc     = xtrue)

case "$synth" in
  *:tlm:*)
    synth_tlm=true
    ;;
  auto)
    if test -d $srcdir/../Synthesis-Actor-TLM/; then
      synth_tlm=true
    else
      synth_tlm=false
    fi
    ;;
  *)
    synth_tlm=false
    ;;
esac

AM_CONDITIONAL(SYNTH_TLM,     test x$synth_tlm     = xtrue)

case "$synth" in
  *:sgx:*)
    synth_sgx=true
    ;;
  auto)
    if test -d $srcdir/../specGen/; then
      synth_sgx=true
    else
      synth_sgx=false
    fi
    ;;
  *)
    synth_sgx=false
    ;;
esac

AM_CONDITIONAL(SYNTH_SGX,     test x$synth_sgx     = xtrue)

case "$synth" in
  *:testlib:*)
    synth_testlib=true
    ;;
  auto)
    if test -d $srcdir/../Simulation-HW-Actor/; then
      synth_testlib=true
    else
      synth_testlib=false
    fi
    ;;
  *)
    synth_testlib=false
    ;;
esac

AM_CONDITIONAL(SYNTH_TESTLIB, test x$synth_testlib = xtrue)

AC_CONFIG_HEADER([config.h])

dnl check for exe extension
AC_EXEEXT

dnl This pulls in SystemC, boost, CoSupport
dnl and SystemC-VPC if --enable-vpc was given at SysteMoC configure time
ACJF_CHECK_LIB_SYSTEMOC
AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMC_INCLUDE $BOOST_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $SYSTEMC_LDFLAGS $BOOST_LDFLAGS"

AC_CONFIG_FILES([Makefile])

m4_sinclude([systemoc-cluster-example/configure.in.frag])
m4_sinclude([systemoc-fir/configure.in.frag])
m4_sinclude([systemoc-getValueAt/configure.in.frag])
#m4_sinclude([systemoc-par/configure.in.frag])
m4_sinclude([systemoc-sdf/configure.in.frag])
m4_sinclude([systemoc-select/configure.in.frag])
m4_sinclude([systemoc-sqr/configure.in.frag])
m4_sinclude([systemoc-sr/configure.in.frag])
m4_sinclude([systemoc-fsm-xor-composition/configure.in.frag])
m4_sinclude([systemoc-fsm-connector-state/configure.in.frag])
m4_sinclude([systemoc-src-snk/configure.in.frag])
m4_sinclude([systemoc-src-snk-hierarchy/configure.in.frag])
m4_sinclude([systemoc-src-snk-multiplex/configure.in.frag])
m4_sinclude([systemoc-src-snk-multireader/configure.in.frag])
m4_sinclude([systemoc-src-snk-multireader-sched/configure.in.frag])
m4_sinclude([systemoc-src-snk-multiwriter/configure.in.frag])
m4_sinclude([systemoc-src-snk-noconsume/configure.in.frag])
m4_sinclude([systemoc-src-snk-void/configure.in.frag])
m4_sinclude([systemoc-systemc/configure.in.frag])

if test "$acjf_cv_systemoc_wsdf_support" = "yes"; then
  m4_sinclude([systemoc-wsdf/configure.in.frag])
  m4_sinclude([systemoc-wsdf-dist/configure.in.frag])
  m4_sinclude([systemoc-wsdf-expr/configure.in.frag])
  m4_sinclude([systemoc-wsdf-recons-dila/configure.in.frag])
  m4_sinclude([systemoc-wsdf-src-snk/configure.in.frag])
fi

SUBDIRS=$subdirs
AC_SUBST(SUBDIRS)

ACJF_DONE

AC_OUTPUT
