#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT([SysteMoC], [0.6], [falk@cs.fau.de], [SysteMoC--mainline--0.6])
AC_PREREQ(2.57)
ACJF_INIT

AC_CONFIG_SRCDIR([smoc_root_node.cpp])
AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL( CC, gcc)
ACJF_CHECK_CROSSTOOL( CXX, g++)
ACJF_CHECK_CROSSTOOL( AR, ar)
ACJF_CHECK_CROSSTOOL( RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL( NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
# Checks for programs.
#AC_PROG_LIBTOOL
#AC_PROG_INSTALL
#AC_PROG_LN_S
#AC_PROG_MAKE_SET

AM_INIT_AUTOMAKE

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])

AC_CONFIG_HEADER([config.h])

DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(ON)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(ON)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN([SysteMoC--mainline], [doxygen.cfg], [doxygen-doc])

AC_DISABLE_SHARED
AM_PROG_LIBTOOL

dnl check for exe extension
AC_EXEEXT

# Checks for header files.
# AC_FUNC_ALLOCA
# AC_HEADER_STDC
# AC_CHECK_HEADERS([OS.h fcntl.h limits.h mach/mach.h malloc.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

ACJF_CHECK_LIB_SYSTEMC
ACJF_CHECK_LIB_BOOST
ACJF_NEED_PKG([Support])

### SystemC-VPC ###
# --enable-vpc option
AC_ARG_ENABLE(
  [vpc],
  [[  --enable-vpc            enable vpc support for SysteMoC [default=yes]]],
  [case "$enableval" in
     yes) enable_vpc=yes ;;
     no)  enable_vpc=no  ;;
     *)   enable_vpc=no  ;;
   esac],
  [enable_vpc=yes # default]
)

if test x"$enable_vpc" = x"yes"; then
  SYSTEMC_VPC_INCLUDE=" \
    -I\$(top_builddir)/../SystemC-VPC/include \
    $SYSTEMC_INCLUDE"

  SYSTEMC_VPC_LDFLAGS=" \
    -L\$(top_builddir)/../SystemC-VPC \
    -lsystemcvpc \
    $SYSTEMC_LDFLAGS"

  SYSTEMC_VPC_DEPENDENCIES=" \
    \$(top_builddir)/../SystemC-VPC/libsystemcvpc.la"

  CPPFLAGS="$CPPFLAGS -DENABLE_SYSTEMC_VPC"
else
  SYSTEMC_VPC_INCLUDE=""
  SYSTEMC_VPC_LDFLAGS=""
  SYSTEMC_VPC_DEPENDENCIES=""
fi

AC_SUBST([SYSTEMC_VPC_INCLUDE])
AC_SUBST([SYSTEMC_VPC_LDFLAGS])
AC_SUBST([SYSTEMC_VPC_DEPENDENCIES])

if test -d $srcdir/wsdf; then
  AC_ARG_ENABLE(
    [wsdf],
    [[  --enable-wsdf           Turn on SysteMoC WSDF support [default=yes]]],
    [case "${enableval}" in
       yes) enable_wsdf=true ;;
       no)  enable_wsdf=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-wsdf) ;;
     esac],
    [enable_wsdf=true # default]
  )
else
  enable_wsdf=false
fi
AM_CONDITIONAL([WSDF], [test x$enable_wsdf = xtrue])
if test x$enable_wsdf = xtrue; then
  AC_DEFINE([SMOC_ENABLE_WSDF], [yes], [Define if you want WSDF Support])
fi

AC_CONFIG_FILES([Makefile])

ACJF_DONE

AC_OUTPUT
