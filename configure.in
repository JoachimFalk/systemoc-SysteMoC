#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT(
  [SysteMoC Testcases Release Branch], [0.9.3],
  [falk@cs.fau.de streubuehr@cs.fau.de christian.zebelein@informatik.uni-erlangen.de],
  [SysteMoC-Testcases--release-])

AC_PREREQ(2.57)

AC_PATH_PROGS(BASH, bash)
AC_PATH_PROGS(PERL, perl)

ACJF_INIT

AC_CONFIG_SRCDIR([Testcases.txt])

AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_LANG([C++])

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL(CC, gcc)
ACJF_CHECK_CROSSTOOL(CXX, g++)
ACJF_CHECK_CROSSTOOL(AR, ar)
ACJF_CHECK_CROSSTOOL(RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL(NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
dnl AC_PROG_LIBTOOL
dnl AC_PROG_INSTALL
dnl AC_PROG_LN_S
dnl AC_PROG_MAKE_SET

AC_DISABLE_SHARED
AC_PROG_LIBTOOL

AM_INIT_AUTOMAKE

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])

ACJF_CHECK_LIB_SYSTEMC
dnl AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMC_INCLUDE"
dnl AM_LDFLAGS="$AM_LDFLAGS   $SYSTEMC_LDFLAGS"
ACJF_CHECK_LIB_BOOST
dnl AM_CPPFLAGS="$AM_CPPFLAGS $BOOST_INCLUDE"
dnl AM_LDFLAGS="$AM_LDFLAGS   $BOOST_LDFLAGS"
ACJF_CHECK_LIB_COSUPPORT
ACJF_CHECK_LIB_SYSTEMOC
SYSTEMOC_ENABLE_VPC=$acjf_cv_systemoc_enable_vpc
AC_SUBST([SYSTEMOC_ENABLE_VPC])


# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

dnl check for exe extension
AC_EXEEXT

ACJF_CHECK_PKG([Synthesis-SW], [Synthesis-SW], [synth_sw=true], [synth_sw=false])
AM_CONDITIONAL(SYNTH_SW, test x"$synth_sw" = x"true")
ACJF_CHECK_PKG([Synthesis-Pthread], [Synthesis-Pthread], [synth_pthread=true], [synth_pthread=false])
AM_CONDITIONAL(SYNTH_PTHREAD, test x"$synth_pthread" = x"true")
ACJF_CHECK_PKG([Synthesis-SystemC], [Synthesis-SystemC], [synth_sysc=true], [synth_sysc=false])
AM_CONDITIONAL(SYNTH_SYSC, test x"$synth_sysc" = x"true")
ACJF_CHECK_PKG([Synthesis-TLM], [Synthesis-TLM], [synth_tlm=true], [synth_tlm=false])
AM_CONDITIONAL(SYNTH_TLM, test x"$synth_tlm" = x"true")
ACJF_CHECK_PKG([Synthesis-MPI], [Synthesis-MPI], [synth_mpi=true], [synth_mpi=false])
AM_CONDITIONAL(SYNTH_MPI, test x"$synth_mpi" = x"true")
ACJF_CHECK_PKG([Synthesis-Vast], [Synthesis-Vast], [synth_vast=true], [synth_vast=false])
AM_CONDITIONAL(SYNTH_VAST, test x"$synth_vast" = x"true")

AC_CONFIG_HEADER([config.h])
AC_CONFIG_FILES([Makefile])

if test x"$acjf_cv_systemoc_enable_vpc" = x"yes"; then
  AC_CONFIG_SUBDIRS([vpc])
fi

m4_sinclude([systemoc-sqr/configure.in.frag])
m4_sinclude([systemoc-sqr-int/configure.in.frag])
m4_sinclude([systemoc-cluster-example/configure.in.frag])
m4_sinclude([systemoc-fir/configure.in.frag])
m4_sinclude([systemoc-getValueAt/configure.in.frag])
#m4_sinclude([systemoc-par/configure.in.frag])
m4_sinclude([systemoc-sdf/configure.in.frag])
m4_sinclude([systemoc-select/configure.in.frag])
m4_sinclude([systemoc-sr/configure.in.frag])
m4_sinclude([systemoc-fsm-and-composition/configure.in.frag])
m4_sinclude([systemoc-fsm-xor-composition/configure.in.frag])
m4_sinclude([systemoc-fsm-junction-state/configure.in.frag])
m4_sinclude([systemoc-src-snk/configure.in.frag])
m4_sinclude([systemoc-src-snk-hierarchy/configure.in.frag])
m4_sinclude([systemoc-src-snk-multiplex/configure.in.frag])
m4_sinclude([systemoc-src-snk-multireader/configure.in.frag])
m4_sinclude([systemoc-src-snk-multireader-sched/configure.in.frag])
m4_sinclude([systemoc-src-snk-multiwriter/configure.in.frag])
m4_sinclude([systemoc-src-snk-noconsume/configure.in.frag])
m4_sinclude([systemoc-src-snk-void/configure.in.frag])
m4_sinclude([systemoc-systemc/configure.in.frag])

if test "$acjf_cv_systemoc_wsdf_support" = "yes"; then
  m4_sinclude([systemoc-wsdf/configure.in.frag])
  m4_sinclude([systemoc-wsdf-dist/configure.in.frag])
  m4_sinclude([systemoc-wsdf-expr/configure.in.frag])
  m4_sinclude([systemoc-wsdf-recons-dila/configure.in.frag])
  m4_sinclude([systemoc-wsdf-src-snk/configure.in.frag])
  true; # dummy statement otherwise if xxx; then <emty> fi is a syntax error
fi

SUBDIRS=$subdirs
AC_SUBST(SUBDIRS)

ACJF_DONE

AC_OUTPUT
