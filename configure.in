#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT([SysteMoC], [0.9], [joachim.falk@informatik.uni-erlangen.de christian.zebelein@informatik.uni-erlangen.de], [SysteMoC--devel--0.9])
AC_PREREQ(2.57)
ACJF_INIT

SYSTEMOC_MAJOR_VERSION=
SYSTEMOC_MINOR_VERSION=
SYSTEMOC_MICRO_VERSION=
SYSTEMOC_VERSION="$PACKAGE_VERSION"
eval `echo $PACKAGE_VERSION | sed -ne ['/^[0-9][0-9]*\(\.[0-9][0-9]*\|\)\(\.[0-9][0-9]*\|\)$/{s/^\([0-9][0-9]*\)\(\.\([0-9][0-9]*\)\|\)\(\.\([0-9][0-9]*\)\|\).*$/SYSTEMOC_MAJOR_VERSION=\1; SYSTEMOC_MINOR_VERSION=\3; SYSTEMOC_MICRO_VERSION=\5;/;p}']`
test x"$SYSTEMOC_MAJOR_VERSION" = x"" && SYSTEMOC_MAJOR_VERSION=0
test x"$SYSTEMOC_MINOR_VERSION" = x"" && SYSTEMOC_MINOR_VERSION=0
test x"$SYSTEMOC_MICRO_VERSION" = x"" && SYSTEMOC_MICRO_VERSION=0
dnl echo "\$SYSTEMOC_MAJOR_VERSION: $SYSTEMOC_MAJOR_VERSION"
dnl echo "\$SYSTEMOC_MINOR_VERSION: $SYSTEMOC_MINOR_VERSION"
dnl echo "\$SYSTEMOC_MICRO_VERSION: $SYSTEMOC_MICRO_VERSION"
AC_DEFINE_UNQUOTED([SYSTEMOC_VERSION],
  "$SYSTEMOC_VERSION",
  [Defined to SysteMoC version])
AC_DEFINE_UNQUOTED([SYSTEMOC_MAJOR_VERSION],
  "$SYSTEMOC_MAJOR_VERSION",
  [For SysteMoC version x.y.z defined to major version, e.g., x])
AC_DEFINE_UNQUOTED([SYSTEMOC_MINOR_VERSION],
  "$SYSTEMOC_MINOR_VERSION",
  [For SysteMoC version x.y.z defined to minor version, e.g., y])
AC_DEFINE_UNQUOTED([SYSTEMOC_MICRO_VERSION],
  "$SYSTEMOC_MICRO_VERSION",
  [For SysteMoC version x.y.z defined to micro version, e.g., z])

AC_CONFIG_SRCDIR([smoc-core/smoc_root_node.cpp])
AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL(CC, gcc)
ACJF_CHECK_CROSSTOOL(CXX, g++)
ACJF_CHECK_CROSSTOOL(AR, ar)
ACJF_CHECK_CROSSTOOL(RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL(NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
# Checks for programs.
#AC_PROG_LIBTOOL
#AC_PROG_INSTALL
#AC_PROG_LN_S
#AC_PROG_MAKE_SET

AC_DISABLE_SHARED
AC_PROG_LIBTOOL

AM_INIT_AUTOMAKE

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])
if test x"$enable_debug" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_DEBUG], [yes], [Defined if debug support is enabled])
fi

AC_CONFIG_HEADER([config.h pkginclude/systemoc/smoc_config.h])

DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(ON)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(ON)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN([SysteMoC--mainline], [doxygen.cfg], [doxygen-doc])

dnl check for exe extension
AC_EXEEXT

# Checks for header files.
# AC_FUNC_ALLOCA
# AC_HEADER_STDC
# AC_CHECK_HEADERS([OS.h fcntl.h limits.h mach/mach.h malloc.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

ACJF_CHECK_LIB_SYSTEMC
ACJF_CHECK_LIB_TLM1
ACJF_CHECK_LIB_BOOST
ACJF_CHECK_LIB_COSUPPORT

### TRACEING ###
# --enable-trace option
AC_ARG_ENABLE(
 [trace],
 [[  --enable-trace          Turn on tracing support [default=yes]]],
 [case "${enableval}" in
    yes)  enable_trace=yes  ;;
    no)   enable_trace=no   ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-trace) ;;
  esac],
 [enable_trace=yes #default]
)

AM_CONDITIONAL([SYSTEMOC_ENABLE_TRACE], [test x"$enable_trace" = x"yes"])
# This is a define for pkginclude/systemoc/smoc_config.h to guarantee
# consistency for Examples and Testcases
if test x"$enable_trace" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_TRACE], [yes], [Defined if tracing support is enabled])
fi

### HOOKING ###
# --enable-hooking option
AC_ARG_ENABLE(
 [hooking],
 [[  --enable-hooking        Turn on hooking infrastructure [default=no]]],
 [case "${enableval}" in
    yes)  enable_hooking=yes  ;;
    no)   enable_hooking=no   ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-hooking) ;;
  esac],
 [enable_hooking=no #default]
)

AM_CONDITIONAL([SYSTEMOC_ENABLE_HOOKING], [test x"$enable_hooking" = x"yes"])
# This is a define for pkginclude/systemoc/smoc_config.h to guarantee
# consistency for Examples and Testcases
if test x"$enable_hooking" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_HOOKING], [yes], [Defined if hooking infrastructure is provided])
fi

### SGX ###
# --enable-sgx option
AC_ARG_ENABLE(
 [sgx],
 [[  --enable-sgx            Turn on LibSGX support [default=auto]]],
 [case "${enableval}" in
    yes)  enable_sgx=yes  ;;
    no)   enable_sgx=no   ;;
    auto) enable_sgx=auto ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-sgx) ;;
  esac],
 [enable_sgx=auto #default]
)

echo "enable_sgx: $enable_sgx"

AM_CONDITIONAL([PKG_XERCES_USE_SRCDIR_VERSION], false)
AM_CONDITIONAL([PKG_LIBSGX_USE_SRCDIR_VERSION], false)
if test x"$enable_sgx" != x"no"; then
  ACJF_CHECK_LIB_SGX(
   [echo "found libsgx"; enable_sgx="yes"],
   [echo "missing libsgx"; if test x"$enable_sgx" = x"yes"; then
      AC_MSG_ERROR([cannot find LibSGX package, bailing out])
    fi
    enable_sgx="no"])
fi

echo "enable_sgx: $enable_sgx"

AM_CONDITIONAL([SYSTEMOC_ENABLE_SGX], [test x"$enable_sgx" = x"yes"])
# This is a define for pkginclude/systemoc/smoc_config.h to guarantee
# consistency for Examples and Testcases
if test x"$enable_sgx" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_SGX], [yes], [Defined if SGX support is enabled])
fi

### WSDF ###
# --enable-wsdf option
AC_ARG_ENABLE(
 [wsdf],
 [[  --enable-wsdf           Turn on SysteMoC WSDF support [default=auto]]],
 [case "${enableval}" in
    yes)  enable_wsdf=yes  ;;
    no)   enable_wsdf=no   ;;
    auto) enable_wsdf=auto ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-wsdf) ;;
  esac],
 [enable_wsdf=auto #default]
)

AM_CONDITIONAL([PKG_LIBWSDF_USE_SRCDIR_VERSION], false)
if test x"$enable_wsdf" != x"no"; then
  ACJF_CHECK_LIB_WSDF(
   [enable_wsdf="yes"],
   [if test x"$enable_wsdf" = x"yes"; then
      AC_MSG_ERROR([cannot find LibWSDF package, bailing out])
    fi
    enable_wsdf="no"])
fi

AM_CONDITIONAL([SYSTEMOC_ENABLE_WSDF], [test x"$enable_wsdf" = x"yes"])
# This is a define for pkginclude/systemoc/smoc_config.h to guarantee
# consistency for Examples and Testcases
if test x"$enable_wsdf" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_WSDF], [yes], [Defined if WSDF support is enabled])
fi

### SystemC-VPC ###
# --enable-vpc option
AC_ARG_ENABLE(
 [vpc],
 [[  --enable-vpc            enable vpc support for SysteMoC [default=auto]]],
 [case "$enableval" in
    yes)  enable_vpc=yes  ;;
    no)   enable_vpc=no   ;;
    auto) enable_vpc=auto ;;
    *)    AC_MSG_ERROR(bad value ${enableval} for --enable-vpc) ;;
  esac],
 [enable_vpc=auto #default]
)

AM_CONDITIONAL([PKG_SYSTEMC_VPC_USE_SRCDIR_VERSION], false)
if test x"$enable_vpc" != x"no"; then
  ACJF_CHECK_LIB_SYSTEMC_VPC(
   [enable_vpc="yes";],
   [if test x"$enable_vpc" = x"yes"; then
      AC_MSG_ERROR([cannot find SystemC-VPC package, bailing out])
    fi
    enable_vpc="no"])
fi

AM_CONDITIONAL([SYSTEMOC_ENABLE_VPC], [test x"$enable_vpc" = x"yes"])
# This is a define for pkginclude/systemoc/smoc_config.h to guarantee
# consistency for Examples and Testcases
if test x"$enable_vpc" = x"yes"; then
  AC_DEFINE([SYSTEMOC_ENABLE_VPC], [yes], [Defined if SystemC-VPC support is enabled])
fi

AC_CONFIG_FILES([
  Makefile
  pkginclude/Makefile
])

ACJF_DONE

AC_OUTPUT
